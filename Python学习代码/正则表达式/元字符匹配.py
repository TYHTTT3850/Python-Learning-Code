r"""
字符匹配

.  ：匹配任意一个字符(除了/n)，\.匹配本身
[] :匹配[]中列举的字符
\d :匹配数字,即 0-9
\D :匹配非数字
\s :匹配空白，即空格键、tab键
\S :匹配非空白
\w :匹配单词字符，即 a-z，A-Z，0-9，_
\W :匹配非单词字符

数量匹配

*     :所匹配的字符出现零至无数次
+     :所匹配的字符出现一次至无数次
?     :所匹配的字符出现零次或一次
{m}   :所匹配的字符出现 m 次
{m,}  :所匹配的字符至少出现 m 次
{m,n} :所匹配的字符出现 m 到 n 次

边界匹配

^  :匹配字符串开头
$  :匹配字符串结尾
\b :匹配一个单词的边界
\B :匹配非单词边界

分组匹配

|  :匹配左右任意一个表达式
() :将括号中的字符作为一个分组

"""

import  re

"""--------------------元字符匹配示例--------------------"""
s = "it1 Python22!! @@ ##Pycharm333"

# 匹配所有的数字
result = re.findall(r"\d", s) #字符串前加上r表示转义字符无效，就是普通字符串
print(result)

# 匹配所有的非单词字符(特殊字符)
result = re.findall(r"\W", s) #字符串前加上r表示转义字符无效，就是普通字符串
print(result)

# 匹配所有的小写字母
result = re.findall(r"[a-z]", s)
print(result)

# 匹配所有的e-h的字母
result = re.findall(r"[e-h]", s)
print(result)

# 匹配开头是否为a
print(re.findall(r"^a", s))

#匹配结尾是否为a
print(re.findall(r"a$", s))

# 匹配账号，只能由字母和数字组成，长度限制6-10位
r = r"^[a-zA-Z0-9]{6,10}$" #从字符串头到尾匹配，由字母和数字组成，长度为10
print(re.findall(r,"123456789123")) #超出长度限制
print(re.findall(r,"12345678")) #匹配成功

# 匹配QQ号，要求长度5-11，第一位不为0
print(re.findall(r"^[1-9][0-9]{4,10}$","1233412"))
"""^[1-9]确保第一位不为0，[0-9]{4,10}$确保到结尾处0-9出现的次数为4-10次"""

# 匹配邮箱地址，只允许qq,163,gmail三种地址
# 邮箱格式：{内容}.{内容}.{内容}…….{内容}@{内容}.{内容}.{内容}…….{内容}
rule = r"^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$"
print(re.findall(rule,"1q2w.3e4r.5t6y@gmail.com.aa.ss")) #根据()分组显示结果

# 将正则表达式变为一个整体
rule = r"(^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$)"
print(re.findall(rule,"1q2w.3e4r.5t6y@gmail.com.aa.ss")) #返回每个分组的结果，包括整体分组

# 仅仅返回匹配结果
rule = r"(^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$)"
print(re.match(rule,"1q2w.3e4r.5t6y@gmail.com.aa.ss").group())
